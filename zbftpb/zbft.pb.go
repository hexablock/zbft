// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zbft.proto

/*
	Package zbftpb is a generated protocol buffer package.

	It is generated from these files:
		zbft.proto

	It has these top-level messages:
		Message
*/
package zbftpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import bcpb "github.com/hexablock/blockchain/bcpb"


import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Message_Type int32

const (
	Message_BOOTSTRAP Message_Type = 0
	// PREPARE = 1;   // Prepare transaction/s
	Message_PROPOSAL  Message_Type = 2
	Message_SIGNATURE Message_Type = 3
	Message_PERSIST   Message_Type = 4
)

var Message_Type_name = map[int32]string{
	0: "BOOTSTRAP",
	2: "PROPOSAL",
	3: "SIGNATURE",
	4: "PERSIST",
}
var Message_Type_value = map[string]int32{
	"BOOTSTRAP": 0,
	"PROPOSAL":  2,
	"SIGNATURE": 3,
	"PERSIST":   4,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorZbft, []int{0, 0} }

// All fields except type are optional and used based on context
type Message struct {
	// Type of message
	Type Message_Type `protobuf:"varint,1,opt,name=type,proto3,enum=zbftpb.Message_Type" json:"type,omitempty"`
	// Block in question
	Block *bcpb.Block `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
	// Entity who sent the message where applicable
	From bcpb.PublicKey `protobuf:"bytes,3,opt,name=from,proto3,casttype=bcpb.PublicKey" json:"from,omitempty"`
	// Tx's part of the block that are in question
	Txs []*bcpb.Tx `protobuf:"bytes,4,rep,name=txs" json:"txs,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorZbft, []int{0} }

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_BOOTSTRAP
}

func (m *Message) GetBlock() *bcpb.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *Message) GetFrom() bcpb.PublicKey {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetTxs() []*bcpb.Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "zbftpb.Message")
	proto.RegisterEnum("zbftpb.Message_Type", Message_Type_name, Message_Type_value)
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZbft(dAtA, i, uint64(m.Type))
	}
	if m.Block != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZbft(dAtA, i, uint64(m.Block.Size()))
		n1, err := m.Block.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZbft(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.Txs) > 0 {
		for _, msg := range m.Txs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintZbft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintZbft(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovZbft(uint64(m.Type))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovZbft(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovZbft(uint64(l))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovZbft(uint64(l))
		}
	}
	return n
}

func sovZbft(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZbft(x uint64) (n int) {
	return sovZbft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Message_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &bcpb.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZbft
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZbft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &bcpb.Tx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZbft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZbft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZbft
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZbft
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZbft(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZbft = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZbft   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zbft.proto", fileDescriptorZbft) }

var fileDescriptorZbft = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xaa, 0x4a, 0x4a, 0x2b,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0xb1, 0x0b, 0x92, 0xa4, 0x74, 0xd3, 0x33,
	0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5, 0xc1, 0xd2,
	0x49, 0xa5, 0x69, 0x60, 0x1e, 0x98, 0x03, 0x66, 0x41, 0xb4, 0x49, 0x19, 0x20, 0x29, 0xcf, 0x48,
	0xad, 0x48, 0x4c, 0xca, 0xc9, 0x4f, 0xce, 0xd6, 0x07, 0x93, 0xc9, 0x19, 0x89, 0x99, 0x79, 0xfa,
	0x49, 0xc9, 0x05, 0x49, 0xfa, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x10, 0x1d, 0x4a, 0xb7, 0x19, 0xb9,
	0xd8, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0x34, 0xb8, 0x58, 0x40, 0x52, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x22, 0x7a, 0x10, 0x37, 0xe8, 0x41, 0xa5, 0xf5, 0x42, 0x2a, 0x0b,
	0x52, 0x83, 0xc0, 0x2a, 0x84, 0x14, 0xb9, 0x58, 0xc1, 0x86, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70,
	0x1b, 0x71, 0xeb, 0x81, 0xcc, 0xd5, 0x73, 0x02, 0x09, 0x05, 0x41, 0x64, 0x84, 0xd4, 0xb8, 0x58,
	0xd2, 0x8a, 0xf2, 0x73, 0x25, 0x98, 0x15, 0x18, 0x35, 0x78, 0x9c, 0x84, 0x7e, 0xdd, 0x93, 0xe7,
	0x03, 0x2b, 0x0a, 0x28, 0x4d, 0xca, 0xc9, 0x4c, 0xf6, 0x4e, 0xad, 0x0c, 0x02, 0xcb, 0x0b, 0x49,
	0x71, 0x31, 0x97, 0x54, 0x14, 0x4b, 0xb0, 0x28, 0x30, 0x6b, 0x70, 0x1b, 0x71, 0x40, 0x0c, 0x0a,
	0xa9, 0x08, 0x02, 0x09, 0x2a, 0xd9, 0x73, 0xb1, 0x80, 0x2c, 0x15, 0xe2, 0xe5, 0xe2, 0x74, 0xf2,
	0xf7, 0x0f, 0x09, 0x0e, 0x09, 0x72, 0x0c, 0x10, 0x60, 0x10, 0xe2, 0xe1, 0xe2, 0x08, 0x08, 0xf2,
	0x0f, 0xf0, 0x0f, 0x76, 0xf4, 0x11, 0x60, 0x02, 0x49, 0x06, 0x7b, 0xba, 0xfb, 0x39, 0x86, 0x84,
	0x06, 0xb9, 0x0a, 0x30, 0x0b, 0x71, 0x73, 0xb1, 0x07, 0xb8, 0x06, 0x05, 0x7b, 0x06, 0x87, 0x08,
	0xb0, 0x38, 0x19, 0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c,
	0x13, 0x1e, 0xcb, 0x31, 0x44, 0x29, 0x60, 0x0d, 0x21, 0x90, 0x4f, 0xf5, 0x21, 0xde, 0x4d, 0x62,
	0x03, 0x07, 0x8c, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x8f, 0x1e, 0x77, 0x8f, 0x01, 0x00,
	0x00,
}
